#include <cassert>

namespace CS3358_FA17_A04_sequence_template
{
   template <typename Item>
   Sequence<Item>::Sequence()
      :used(0), current_index(0) {}

   template <typename Item>
   void Sequence<Item>::start() { current_index = 0; }

   template <typename Item>
   void Sequence<Item>::end()
   { current_index = (used > 0) ? used - 1 : 0; }

   template <typename Item>
   void Sequence<Item>::advance()
   {
      assert( is_item() );
      ++current_index;
   }

   template <typename Item>
   void Sequence<Item>::move_back()
   {
      assert( is_item() );
      if (current_index == 0)
         current_index = used;
      else
         --current_index;
   }

   template <typename Item>
   void Sequence<Item>::add(const value_type& entry)
   {
      assert( size() < CAPACITY );

      size_type i;

      if ( ! is_item() )
      {
         if (used > 0)
            for (i = used; i >= 1; --i)
               data[i] = data[i - 1];
         data[0] = entry;
         current_index = 0;
      }
      else
      {
         ++current_index;
         for (i = used; i > current_index; --i)
            data[i] = data[i - 1];
         data[current_index] = entry;
      }
      ++used;
   }

   template <typename Item>
   void Sequence<Item>::remove_current()
   {
      assert( is_item() );

      size_type i;

      for (i = current_index + 1; i < used; ++i)
         data[i - 1] = data[i];
      --used;
   }

   template <typename Item>
   typename Sequence<Item>::size_type Sequence<Item>::size() const
   { return used; }

   template <typename Item>
   bool Sequence<Item>::is_item() const 
   { return (current_index < used); }

   template <typename Item>
   Item Sequence<Item>::current() const
   {
      assert( is_item() );

      return data[current_index];
   }
}

